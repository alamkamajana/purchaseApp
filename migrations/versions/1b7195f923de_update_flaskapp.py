"""Update flaskApp

Revision ID: 1b7195f923de
Revises: 
Create Date: 2024-05-28 09:36:36.214800

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1b7195f923de'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transaction')
    op.drop_table('farmer')
    op.drop_table('product')
    op.drop_table('farmer_product_association')
    with op.batch_alter_table('delivery_order', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('modified', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('create_uid', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('write_uid', sa.Integer(), nullable=True))

    with op.batch_alter_table('nfcapp_cluster_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('nfcapp_commodity_item_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('farmer_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('certStatus', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('nfcapp_commodity_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('nfcapp_farmer_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('certification_status_id', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('nfcapp_station_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('payment', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('modified', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('create_uid', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('write_uid', sa.Integer(), nullable=True))

    with op.batch_alter_table('product_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('purchase_event', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('modified', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('create_uid', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('write_uid', sa.Integer(), nullable=True))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)

    with op.batch_alter_table('purchase_order', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_paid', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('created', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('modified', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('create_uid', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('write_uid', sa.Integer(), nullable=True))
        batch_op.drop_constraint('purchase_order_farmer_id_fkey', type_='foreignkey')
        batch_op.create_foreign_key(None, 'nfcapp_farmer_odoo', ['farmer_id'], ['id'])

    with op.batch_alter_table('purchase_order_line', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('modified', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('create_uid', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('write_uid', sa.Integer(), nullable=True))
        batch_op.drop_constraint('purchase_order_line_product_id_fkey', type_='foreignkey')
        batch_op.drop_column('product_id')

    with op.batch_alter_table('purchase_order_line_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('purchase_order_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('res_user_odoo', schema=None) as batch_op:
        batch_op.add_column(sa.Column('create_date', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('write_date', sa.DateTime(), nullable=True))

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created', sa.DateTime(), nullable=True))

    with op.batch_alter_table('user_session', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created', sa.DateTime(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_session', schema=None) as batch_op:
        batch_op.drop_column('created')

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('created')

    with op.batch_alter_table('res_user_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')

    with op.batch_alter_table('purchase_order_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')

    with op.batch_alter_table('purchase_order_line_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')

    with op.batch_alter_table('purchase_order_line', schema=None) as batch_op:
        batch_op.add_column(sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True))
        batch_op.create_foreign_key('purchase_order_line_product_id_fkey', 'product', ['product_id'], ['id'])
        batch_op.drop_column('write_uid')
        batch_op.drop_column('create_uid')
        batch_op.drop_column('modified')
        batch_op.drop_column('created')

    with op.batch_alter_table('purchase_order', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key('purchase_order_farmer_id_fkey', 'farmer', ['farmer_id'], ['id'])
        batch_op.drop_column('write_uid')
        batch_op.drop_column('create_uid')
        batch_op.drop_column('modified')
        batch_op.drop_column('created')
        batch_op.drop_column('is_paid')

    with op.batch_alter_table('purchase_event', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.drop_column('write_uid')
        batch_op.drop_column('create_uid')
        batch_op.drop_column('modified')
        batch_op.drop_column('created')

    with op.batch_alter_table('product_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')

    with op.batch_alter_table('payment', schema=None) as batch_op:
        batch_op.drop_column('write_uid')
        batch_op.drop_column('create_uid')
        batch_op.drop_column('modified')
        batch_op.drop_column('created')

    with op.batch_alter_table('nfcapp_station_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')

    with op.batch_alter_table('nfcapp_farmer_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')
        batch_op.drop_column('certification_status_id')

    with op.batch_alter_table('nfcapp_commodity_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')

    with op.batch_alter_table('nfcapp_commodity_item_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')
        batch_op.drop_column('certStatus')
        batch_op.drop_column('farmer_id')

    with op.batch_alter_table('nfcapp_cluster_odoo', schema=None) as batch_op:
        batch_op.drop_column('write_date')
        batch_op.drop_column('create_date')

    with op.batch_alter_table('delivery_order', schema=None) as batch_op:
        batch_op.drop_column('write_uid')
        batch_op.drop_column('create_uid')
        batch_op.drop_column('modified')
        batch_op.drop_column('created')

    op.create_table('farmer_product_association',
    sa.Column('farmer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['farmer_id'], ['farmer.id'], name='farmer_product_association_farmer_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name='farmer_product_association_product_id_fkey'),
    sa.PrimaryKeyConstraint('farmer_id', 'product_id', name='farmer_product_association_pkey')
    )
    op.create_table('product',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_code', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('product_name', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('farmer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('item_code_odoo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['farmer_id'], ['farmer.id'], name='product_farmer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='product_pkey')
    )
    op.create_table('farmer',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('farmer_name', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('farmer_code', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('item_code_list', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('odoo_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='farmer_pkey')
    )
    op.create_table('transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('purchase_order_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('station', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('purchase_event_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('farmer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price_unit', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('qty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('subtotal', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['farmer_id'], ['nfcapp_farmer_odoo.id'], name='transaction_farmer_id_fkey'),
    sa.ForeignKeyConstraint(['purchase_event_id'], ['purchase_event.id'], name='transaction_purchase_event_id_fkey'),
    sa.ForeignKeyConstraint(['purchase_order_id'], ['purchase_order_odoo.id'], name='transaction_purchase_order_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transaction_pkey')
    )
    # ### end Alembic commands ###
